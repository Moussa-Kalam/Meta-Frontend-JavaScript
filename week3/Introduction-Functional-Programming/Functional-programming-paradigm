In functional programming, we use a lot of functions and variables.

function getTotal(a,b) {
    return a + b
}
var num1 = 2;
var num2 = 3;

var total = getTotal(num1, num2);


When writing FP code, we keep data and functionality separate and pass data into functions only when we want something computed.

function getDistance(mph, h) {
    return mph * h
}
var mph = 60;
var h = 2;
var distance = getDistance(mph, h);


In functional programming, functions return new values and then use those values somewhere else in the code.


function getDistance(mph, h) {
    return mph * h
}
var mph = 60;
var h = 2;
var distance = getDistance(mph, h);

console.log(distance); // <====== THIS HERE!


There are many more concepts and ideas in functional programming

### First-class functions
A function in JavaScript is just another values that we can:
pass to other functions
save in a variable
return from other functions

### Higher-order functions
A higher-order function is a function that has either one or both of the following characteristics:
it accepts other functions as arguments
it returns functions when invoked


### Pure functions and side-effects
A pure function returns the exact same result as long as it's given the same values

function addTwoNums(a, b) {
    console.log(a + b)
}

This function will always return the same output, based on the input. For example, as long as we give it a specific value, say, a 5, and a 6:  

addTwoNums(5,6); // 11

Another rule for a function to be considered pure is that it should not have side-effects. A side-effect is any instance where a function makes a change outside of itself.

This includes: 

changing variable values outside of the function itself, or even relying on outside variables 

calling a Browser API (even the console itself!) 

calling Math.random() - since the value cannot be reliably repeated

The topic of pure and impure functions can get somewhat complex.



